// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// ENUMS
// ==========================================
enum Role {
  USER
  ADMIN
}

// ==========================================
// USERS
// ==========================================
model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String
  passwordHash String    @map("password_hash")
  fullName     String?   @map("full_name")
  phone        String?
  isActive     Boolean   @default(true) @map("is_active")
  role         Role      @default(USER)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  addresses Address[]
  carts     Cart[]
  orders    Order[]

  @@unique([email], map: "uniq_users_email_ci")
  @@map("users")
}

// ==========================================
// ADDRESSES
// ==========================================
model Address {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String?  @map("user_id") @db.Uuid
  label       String?
  recipient   String?
  phone       String?
  line1       String?
  line2       String?
  city        String?
  province    String?
  postalCode  String?  @map("postal_code")
  countryCode String?  @map("country_code") @db.Char(2)
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user            User?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  billingOrders   Order[] @relation("BillingAddress")
  shippingOrders  Order[] @relation("ShippingAddress")

  @@index([userId, isDefault], map: "idx_addresses_user_default")
  @@map("addresses")
}

// ==========================================
// CATEGORIES
// ==========================================
model Category {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  slug     String  @unique(map: "uniq_categories_slug")
  parentId String? @map("parent_id") @db.Uuid

  // Relations (self-referencing)
  parent            Category?         @relation("CategoryTree", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  children          Category[]        @relation("CategoryTree")
  productCategories ProductCategory[]

  @@index([parentId], map: "idx_categories_parent")
  @@map("categories")
}

// ==========================================
// PRODUCTS
// ==========================================
model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  slug        String   @unique(map: "uniq_products_slug")
  description String?
  brand       String?
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  variants          ProductVariant[]
  productCategories ProductCategory[]

  @@index([status, createdAt], map: "idx_products_status_created")
  @@map("products")
}

// ==========================================
// PRODUCT VARIANTS
// ==========================================
model ProductVariant {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId   String   @map("product_id") @db.Uuid
  sku         String   @unique(map: "uniq_variants_sku")
  title       String?
  price       Decimal  @db.Decimal(12, 2)
  currency    String   @db.Char(3)
  weightGrams Int?     @map("weight_grams")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  product            Product              @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryStock     InventoryStock?
  inventoryMovements InventoryMovement[]
  cartItems          CartItem[]
  orderItems         OrderItem[]

  @@index([productId], map: "idx_variants_product")
  @@map("product_variants")
}

// ==========================================
// PRODUCT CATEGORIES (M2M)
// ==========================================
model ProductCategory {
  productId  String @map("product_id") @db.Uuid
  categoryId String @map("category_id") @db.Uuid

  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([productId, categoryId])
  @@index([categoryId, productId], map: "idx_category_product")
  @@map("product_categories")
}

// ==========================================
// INVENTORY
// ==========================================
model InventoryStock {
  variantId String   @id @map("variant_id") @db.Uuid
  quantity  Int      @default(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([variantId], map: "idx_stock_variant")
  @@map("inventory_stock")
}

model InventoryMovement {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  variantId String   @map("variant_id") @db.Uuid
  delta     Int
  reason    String
  orderId   String?  @map("order_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order   Order?         @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([variantId, createdAt], map: "idx_movements_variant_time")
  @@index([orderId], map: "idx_movements_order")
  @@map("inventory_movements")
}

// ==========================================
// CARTS
// ==========================================
model Cart {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @map("user_id") @db.Uuid
  isCheckedOut       Boolean  @default(false) @map("is_checked_out")
  checkedOutOrderId  String?  @map("checked_out_order_id") @db.Uuid
  currency           String?  @db.Char(3)
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkedOutOrder Order?    @relation("CheckedOutCart", fields: [checkedOutOrderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  items           CartItem[]
  orders          Order[]   @relation("CartOrder")

  @@unique([userId, isCheckedOut], map: "uniq_carts_user_active")
  @@index([userId], map: "idx_carts_user")
  @@map("carts")
}

model CartItem {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId    String @map("cart_id") @db.Uuid
  variantId String @map("variant_id") @db.Uuid
  quantity  Int    @default(1)

  // Relations
  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([cartId, variantId], map: "uniq_cart_variant")
  @@index([cartId], map: "idx_cart_items_cart")
  @@map("cart_items")
}

// ==========================================
// ORDERS
// ==========================================
model Order {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code              String    @unique(map: "uniq_orders_code")
  userId            String?   @map("user_id") @db.Uuid
  status            String    @default("PENDING_PAYMENT")
  cartId            String?   @map("cart_id") @db.Uuid
  billingAddressId  String?   @map("billing_address_id") @db.Uuid
  shippingAddressId String?   @map("shipping_address_id") @db.Uuid
  currency          String    @db.Char(3)
  subtotalAmount    Decimal   @default(0) @map("subtotal_amount") @db.Decimal(12, 2)
  shippingAmount    Decimal   @default(0) @map("shipping_amount") @db.Decimal(12, 2)
  discountAmount    Decimal   @default(0) @map("discount_amount") @db.Decimal(12, 2)
  totalAmount       Decimal   @default(0) @map("total_amount") @db.Decimal(12, 2)
  placedAt          DateTime? @map("placed_at") @db.Timestamptz(6)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user               User?               @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  cart               Cart?               @relation("CartOrder", fields: [cartId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  billingAddress     Address?            @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  shippingAddress    Address?            @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  items              OrderItem[]
  payments           Payment[]
  shipments          Shipment[]
  inventoryMovements InventoryMovement[]
  checkedOutCarts    Cart[]              @relation("CheckedOutCart")

  @@index([userId, status, createdAt], map: "idx_orders_user_status_created")
  @@index([placedAt], map: "idx_orders_placed_at")
  @@map("orders")
}

model OrderItem {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId      String  @map("order_id") @db.Uuid
  variantId    String  @map("variant_id") @db.Uuid
  sku          String
  productTitle String? @map("product_title")
  variantTitle String? @map("variant_title")
  price        Decimal @db.Decimal(12, 2)
  quantity     Int
  total        Decimal @db.Decimal(12, 2)

  // Relations
  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([orderId], map: "idx_order_items_order")
  @@index([variantId, orderId], map: "idx_order_items_variant_order")
  @@map("order_items")
}

// ==========================================
// PAYMENTS
// ==========================================
model Payment {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId        String   @map("order_id") @db.Uuid
  provider       String?
  status         String
  amount         Decimal  @db.Decimal(12, 2)
  currency       String   @db.Char(3)
  transactionId  String?  @unique(map: "uniq_payments_txid") @map("transaction_id")
  idempotencyKey String?  @unique(map: "uniq_payments_idemp") @map("idempotency_key")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([orderId], map: "idx_payments_order")
  @@map("payments")
}

// ==========================================
// SHIPMENTS
// ==========================================
model Shipment {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId        String    @map("order_id") @db.Uuid
  status         String    @default("READY")
  courier        String?
  trackingNumber String?   @map("tracking_number")
  shippedAt      DateTime? @map("shipped_at") @db.Timestamptz(6)

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([orderId], map: "idx_shipments_order")
  @@index([trackingNumber], map: "idx_shipments_tracking")
  @@map("shipments")
}

// ==========================================
// IDEMPOTENCY KEYS
// ==========================================
model IdempotencyKey {
  key         String   @id
  scope       String
  requestHash String   @map("request_hash")
  response    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([createdAt], map: "idx_idem_created")
  @@map("idempotency_keys")
}
